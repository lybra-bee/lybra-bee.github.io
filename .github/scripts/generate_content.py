#!/usr/bin/env python3
import os
import json
import requests
import time
import logging
import glob
from datetime import datetime
from slugify import slugify
import yaml

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
CLOUDFLARE_API_KEY = os.environ.get("CLOUDFLARE_API_KEY")

POSTS_DIR = 'content/posts'
STATIC_DIR = 'static/images/posts'
GALLERY_FILE = 'data/gallery.yaml'
PLACEHOLDER = 'static/images/placeholder.jpg'

os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(STATIC_DIR, exist_ok=True)
os.makedirs(os.path.dirname(PLACEHOLDER), exist_ok=True)
os.makedirs(os.path.dirname(GALLERY_FILE), exist_ok=True)

def safe_yaml_value(value):
    if not value: return ""
    return str(value).replace('"', "'").replace(':', ' -').replace('\n', ' ').replace('\r', ' ').strip()

def generate_with_openrouter(prompt):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter"""
    try:
        if not OPENROUTER_API_KEY:
            logging.warning("‚ö†Ô∏è OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None
            
        logging.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter...")
        headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}
        r = requests.post("https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json={
                "model": "gpt-4o-mini", 
                "messages":[{"role":"user","content":prompt}],
                "max_tokens": 1000
            },
            timeout=60
        )
        r.raise_for_status()
        result = r.json()["choices"][0]["message"]["content"].strip().strip('"')
        logging.info(f"‚úÖ OpenRouter –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        return result
            
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        return None

def generate_article():
    header_prompt = ("–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö "
                     "–≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö (–Ω–µ –±–æ–ª–µ–µ 7 —Å–ª–æ–≤)")
    
    try:
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞...")
        title = generate_with_openrouter(header_prompt)
        if not title:
            title = "–ù–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ 2025"
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç API ‚Äî fallback")
        logging.info(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        
        content_prompt = (f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ 500-600 —Å–ª–æ–≤ "
                          f"–ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: {title}. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º.")
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏...")
        text = generate_with_openrouter(content_prompt)
        if not text:
            logging.warning("‚ö†Ô∏è –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî fallback")
            text = (f"–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏. "
                    f"–í 2025 –≥–æ–¥—É –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã:\n\n"
                    "1. **–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π AI** - –º–æ–¥–µ–ª–∏ —Ç–∏–ø–∞ GPT —Å—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —à–∏—Ä–æ–∫–æ–π –ø—É–±–ª–∏–∫–µ\n"
                    "2. **–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å** - AI —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∞—É–¥–∏–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
                    "3. **–≠—Ç–∏—á–µ—Å–∫–∏–π AI** - –ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç—Ç–∏–∫–µ\n\n"
                    "–≠—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–µ–Ω—è—é—Ç –Ω–∞—à—É –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã.")
        
        return title, text, "AI Generator"
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        fallback_text = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä—ã–º–∏ —Ç–µ–º–ø–∞–º–∏."
        return "–†–∞–∑–≤–∏—Ç–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞", fallback_text, "Fallback"

def generate_image(title, slug):
    try:
        logging.info("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ SVG-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        img_path = os.path.join(STATIC_DIR, f"{slug}.svg")
        safe_title = title.replace('"', '').replace("'", "")
        svg_content = f'''<svg width="1200" height="630" xmlns="http://www.w3.org/2000/svg">
<defs>
<linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
<stop offset="0%" stop-color="#667eea"/>
<stop offset="100%" stop-color="#764ba2"/>
</linearGradient>
</defs>
<rect width="100%" height="100%" fill="url(#grad)"/>
<text x="600" y="300" font-family="Arial" font-size="48" fill="white" text-anchor="middle" font-weight="bold">
{safe_title}
</text>
<text x="600" y="380" font-family="Arial" font-size="24" fill="rgba(255,255,255,0.8)" text-anchor="middle">
AI Generated Content
</text>
</svg>'''
        with open(img_path, 'w', encoding='utf-8') as f:
            f.write(svg_content)
        logging.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {img_path}")
        return f"/images/posts/{slug}.svg"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return PLACEHOLDER

def update_gallery(title, slug, image_path):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–∞–ª–µ—Ä–µ—é, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        gallery = []
        if os.path.exists(GALLERY_FILE):
            try:
                with open(GALLERY_FILE, 'r', encoding='utf-8') as f:
                    gallery = yaml.safe_load(f) or []
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é: {e}")
                gallery = []

        image_src = image_path if image_path.startswith('/') else f"/{image_path}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ slug
        if not any(item.get('src', '') == image_src for item in gallery):
            gallery.insert(0, {
                "title": safe_yaml_value(title),
                "alt": safe_yaml_value(title),
                "src": image_src,
                "date": datetime.now().strftime("%Y-%m-%d"),
                "tags": ["AI", "Tech"]
            })

        with open(GALLERY_FILE, 'w', encoding='utf-8') as f:
            yaml.safe_dump(gallery, f, allow_unicode=True, default_flow_style=False)

        logging.info(f"‚úÖ –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(gallery)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏: {e}")

def save_article(title, text, model, slug, image_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—å—é —Å frontmatter"""
    try:
        filename = os.path.join(POSTS_DIR, f'{slug}.md')
        image_url = image_path if image_path.startswith('/') else f"/{image_path}"
        front_matter = {
            'title': safe_yaml_value(title),
            'date': datetime.now().strftime("%Y-%m-%dT%H:%M:%S+03:00"),
            'image': image_url,
            'draft': False,
            'tags': ["AI", "Tech", "–ù–µ–π—Ä–æ—Å–µ—Ç–∏"],
            'categories': ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
            'author': model,
            'type': "posts",
            'description': safe_yaml_value(text[:150] + "..." if len(text) > 150 else text)
        }
        yaml_content = yaml.safe_dump(front_matter, allow_unicode=True, default_flow_style=False, sort_keys=False)
        content = f"""---
{yaml_content}---

{text}
"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏: {e}")

def cleanup_old_posts(keep=10):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö"""
    try:
        posts = sorted(glob.glob(os.path.join(POSTS_DIR, "*.md")), key=os.path.getmtime, reverse=True)
        if len(posts) > keep:
            for old_post in posts[keep:]:
                slug = os.path.splitext(os.path.basename(old_post))[0]
                os.remove(old_post)
                logging.info(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç–∞—Ç—å—è: {old_post}")
                for ext in ['.png', '.svg', '.jpg']:
                    img_path = os.path.join(STATIC_DIR, f"{slug}{ext}")
                    if os.path.exists(img_path):
                        os.remove(img_path)
                        logging.info(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_path}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

def main():
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        title, text, model = generate_article()
        slug = slugify(title)
        logging.info(f"üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: {title}")
        image_path = generate_image(title, slug)
        save_article(title, text, model, slug, image_path)
        update_gallery(title, slug, image_path)
        cleanup_old_posts(keep=10)
        logging.info("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
