#!/usr/bin/env python3
import os
import json
import requests
import logging
import shutil
from datetime import datetime
from pathlib import Path
import yaml

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

STATIC_POSTS_DIR = Path("static/images/posts")
ASSETS_GALLERY_DIR = Path("assets/gallery")
CONTENT_POSTS_DIR = Path("content/posts")
GALLERY_YAML = Path("data/gallery.yaml")
GALLERY_JSON = Path("data/gallery.json")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ ===
def generate_article_title():
    prompt = "–ü—Ä–∏–¥—É–º–∞–π —ë–º–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ –ò–ò –∏ –≤—ã—Å–æ–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
    try:
        response = requests.post(
            "https://api.openrouter.ai/v1/chat/completions",
            headers={"Authorization": f"Bearer {os.environ['OPENROUTER_API_KEY']}"},
            json={"model": "gpt-4.1-mini", "messages":[{"role":"user","content": prompt}]}
        )
        response.raise_for_status()
        title = response.json()["choices"][0]["message"]["content"].strip()
        logging.info("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OpenRouter")
        return title
    except Exception as e:
        logging.warning(f"OpenRouter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}, –ø—Ä–æ–±—É–µ–º GROQ...")
    try:
        response = requests.post(
            "https://api.groq.ai/generate",
            headers={"Authorization": f"Bearer {os.environ['GROQ_API_KEY']}"},
            json={"prompt": prompt}
        )
        response.raise_for_status()
        title = response.json()["text"].strip()
        logging.info("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ GROQ")
        return title
    except Exception as e:
        logging.error(f"GROQ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        return "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è"

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ ===
def generate_article_body(title):
    prompt = f"–ù–∞–ø–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: '{title}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"
    try:
        response = requests.post(
            "https://api.openrouter.ai/v1/chat/completions",
            headers={"Authorization": f"Bearer {os.environ['OPENROUTER_API_KEY']}"},
            json={"model": "gpt-4.1-mini", "messages":[{"role":"user","content": prompt}]}
        )
        response.raise_for_status()
        body = response.json()["choices"][0]["message"]["content"].strip()
        logging.info("–°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ OpenRouter")
        return body
    except Exception as e:
        logging.warning(f"OpenRouter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Å—Ç–∞—Ç—å–∏: {e}, –ø—Ä–æ–±—É–µ–º GROQ...")
    try:
        response = requests.post(
            "https://api.groq.ai/generate",
            headers={"Authorization": f"Bearer {os.environ['GROQ_API_KEY']}"},
            json={"prompt": prompt}
        )
        response.raise_for_status()
        body = response.json()["text"].strip()
        logging.info("–°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ GROQ")
        return body
    except Exception as e:
        logging.error(f"GROQ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —Å—Ç–∞—Ç—å–∏: {e}")
        return "–ö–æ–Ω—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é ===
def save_article(title, body):
    safe_title = "".join(c if c.isalnum() or c in "-_" else "-" for c in title.lower())
    filename = CONTENT_POSTS_DIR / f"{safe_title}.md"
    front_matter = f"""---
title: "{title}"
date: '{datetime.now().strftime('%Y-%m-%d')}'
draft: false
---

{body}
"""
    CONTENT_POSTS_DIR.mkdir(parents=True, exist_ok=True)
    with open(filename, "w", encoding="utf-8") as f:
        f.write(front_matter)
    logging.info(f"–°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    return filename

# === –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ static ‚Üí assets/gallery, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ===
def update_gallery_assets():
    ASSETS_GALLERY_DIR.mkdir(parents=True, exist_ok=True)
    for img in STATIC_POSTS_DIR.glob("*.*"):
        dest = ASSETS_GALLERY_DIR / img.name
        if not dest.exists():
            shutil.copy2(img, dest)
            logging.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ assets: {img.name}")

# === –û–±–Ω–æ–≤–ª—è–µ–º data/gallery.yaml –∏ .json ===
def update_gallery_data():
    gallery = []
    for img in ASSETS_GALLERY_DIR.glob("*.*"):
        gallery.append({
            "alt": img.stem,
            "date": datetime.now().strftime('%Y-%m-%d'),
            "src": f"/assets/gallery/{img.name}",
            "title": img.stem
        })
    with open(GALLERY_YAML, "w", encoding="utf-8") as f:
        yaml.dump(gallery, f, allow_unicode=True)
    with open(GALLERY_JSON, "w", encoding="utf-8") as f:
        json.dump(gallery, f, ensure_ascii=False, indent=2)
    logging.info(f"–ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(gallery)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏...")
    title = generate_article_title()
    body = generate_article_body(title)
    save_article(title, body)
    update_gallery_assets()
    update_gallery_data()

if __name__ == "__main__":
    main()
