#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
generate_content.py
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å—Ç–∞—Ç—å–∏ (Groq -> OpenRouter -> fallback),
—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—å–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–∞–ª–µ—Ä–µ—é —Å –í–°–ï–ú–ò –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏,
—É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ .md —Å—Ç–∞—Ç—å–∏, –æ—Å—Ç–∞–≤–ª—è—è 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö.
"""

import os
import json
import yaml
import logging
import requests
import glob
from datetime import datetime
from slugify import slugify

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ü–∞–ø–∫–∏ / –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
POSTS_DIR = "content/posts"
STATIC_DIR = "static/images/posts"
GALLERY_FILE = "data/gallery.yaml"
KEEP_POSTS = 10
PLACEHOLDER = os.path.join(STATIC_DIR, "placeholder.svg")

os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(STATIC_DIR, exist_ok=True)
os.makedirs(os.path.dirname(GALLERY_FILE), exist_ok=True)

# API –∫–ª—é—á–∏
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")

# ---------------- Helpers ----------------
def safe_yaml_value(value):
    if not value:
        return ""
    return str(value).replace('"', "'").replace('\n', ' ').strip()

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API ---
def generate_with_openrouter(prompt, max_tokens=1200):
    if not OPENROUTER_API_KEY:
        return None
    try:
        logging.info("üåê –ü—Ä–æ–±—É–µ–º OpenRouter...")
        headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
        payload = {"model": "gpt-4o-mini", "messages": [{"role": "user", "content": prompt}], "max_tokens": max_tokens}
        r = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload, timeout=60)
        r.raise_for_status()
        data = r.json()
        if "choices" in data and data["choices"]:
            return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter failed: {e}")
    return None

def generate_with_groq(prompt, max_tokens=1200):
    if not GROQ_API_KEY:
        return None
    try:
        logging.info("üåê –ü—Ä–æ–±—É–µ–º Groq...")
        endpoints = [
            "https://api.groq.com/openai/v1/chat/completions",
            "https://api.groq.com/v1/chat/completions",
        ]
        headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}
        for url in endpoints:
            try:
                payload = {"model": "gpt-4o-mini", "messages": [{"role": "user", "content": prompt}], "max_tokens": max_tokens}
                r = requests.post(url, headers=headers, json=payload, timeout=60)
                r.raise_for_status()
                data = r.json()
                if "choices" in data and data["choices"]:
                    c = data["choices"][0]
                    if "message" in c and "content" in c["message"]:
                        return c["message"]["content"].strip()
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è Groq endpoint {url} failed: {e}")
                continue
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Groq failed: {e}")
    return None

# ---------------- High level generators ----------------
def generate_title(year):
    prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö. 
–°–æ—Å—Ç–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π (5‚Äì9 —Å–ª–æ–≤), —ë–º–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –¥–ª—è –±–ª–æ–≥–∞. –ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è {year} –≥–æ–¥–∞."""
    text = generate_with_groq(prompt, max_tokens=70)
    if text:
        logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–µ–∑ Groq")
        return text
    text = generate_with_openrouter(prompt, max_tokens=70)
    if text:
        logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–µ–∑ OpenRouter")
        return text
    logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç API ‚Äî fallback")
    return f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π {year}"

def generate_article_text(title, year):
    prompt = f"–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: ¬´{title}¬ª. –û–±—ä—ë–º 400-600 —Å–ª–æ–≤. –í–≤–µ–¥–∏ —Ä–∞–∑–¥–µ–ª—ã —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ."
    text = generate_with_groq(prompt, max_tokens=1100)
    if text:
        logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —á–µ—Ä–µ–∑ Groq (–ø–µ—Ä–≤—ã–µ 120 —Å–∏–º–≤–æ–ª–æ–≤): {text[:120]}...")
        return text
    text = generate_with_openrouter(prompt, max_tokens=1100)
    if text:
        logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —á–µ—Ä–µ–∑ OpenRouter (–ø–µ—Ä–≤—ã–µ 120 —Å–∏–º–≤–æ–ª–æ–≤): {text[:120]}...")
        return text
    logging.warning("‚ö†Ô∏è –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî fallback")
    return f"## –í–≤–µ–¥–µ–Ω–∏–µ\n–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ {year} –≥–æ–¥—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.\n\n## –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n- –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏\n- –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã\n- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò –≤ —Ä–∞–∑–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª—è—Ö\n\n## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ä–∞—Å–ª–∏."

# ---------------- Image ----------------
def generate_image(title, slug):
    try:
        img_path = os.path.join(STATIC_DIR, f"{slug}.svg")
        svg_content = f'''<svg width="1200" height="630" xmlns="http://www.w3.org/2000/svg">
<rect width="100%" height="100%" fill="#667eea"/>
<text x="600" y="300" font-size="48" fill="white" text-anchor="middle">{title}</text>
</svg>'''
        with open(img_path, 'w', encoding='utf-8') as f:
            f.write(svg_content)
        return f"/images/posts/{slug}.svg"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return PLACEHOLDER

# ---------------- Gallery ----------------
def rebuild_gallery():
    try:
        files = glob.glob(os.path.join(STATIC_DIR, "*"))
        files = sorted(files, key=os.path.getmtime)
        gallery = []
        for fpath in files:
            fname = os.path.basename(fpath)
            gallery.append({
                "src": f"/images/posts/{fname}",
                "alt": fname,
                "title": fname,
                "date": datetime.fromtimestamp(os.path.getmtime(fpath)).strftime("%Y-%m-%d")
            })
        with open(GALLERY_FILE, 'w', encoding='utf-8') as f:
            yaml.safe_dump(gallery, f, allow_unicode=True, default_flow_style=False)
        logging.info(f"‚úÖ –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ({len(gallery)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏: {e}")

# ---------------- Save article ----------------
def save_article(title, text, model_name, slug, image_path):
    try:
        filename = os.path.join(POSTS_DIR, f"{slug}.md")
        fm = {
            "title": safe_yaml_value(title),
            "date": datetime.now().strftime("%Y-%m-%dT%H:%M:%S+03:00"),
            "draft": False,
            "image": image_path,
            "tags": ["AI","Tech"],
            "categories": ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
            "author": model_name,
            "description": safe_yaml_value(text[:200]+"..." if len(text)>200 else text)
        }
        yaml_block = yaml.safe_dump(fm, allow_unicode=True, default_flow_style=False, sort_keys=False)
        content = f"---\n{yaml_block}---\n\n{text}\n"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏: {e}")

# ---------------- Cleanup ----------------
def cleanup_old_posts():
    posts = sorted(glob.glob(os.path.join(POSTS_DIR, "*.md")), key=os.path.getmtime, reverse=True)
    for old in posts[KEEP_POSTS:]:
        try:
            os.remove(old)
            logging.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç: {old}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {old}: {e}")

# ---------------- Main ----------------
def main():
    year = datetime.now().year
    title = generate_title(year)
    slug = slugify(title)
    text = generate_article_text(title, year)
    image_path = generate_image(title, slug)
    save_article(title, text, "AI Generator", slug, image_path)
    rebuild_gallery()
    cleanup_old_posts()
    logging.info("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
