#!/usr/bin/env python3
import os
import json
import requests
import time
import base64
import logging
import glob
from datetime import datetime
from slugify import slugify
import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# API –∫–ª—é—á–∏
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
SUBNP_BASE_URL = "https://subnp.com"  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL

# –ü–∞–ø–∫–∏
POSTS_DIR = 'content/posts'
STATIC_DIR = 'static/images/posts'
GALLERY_FILE = 'data/gallery.yaml'
PLACEHOLDER = 'static/images/placeholder.jpg'

os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(STATIC_DIR, exist_ok=True)
os.makedirs(os.path.dirname(PLACEHOLDER), exist_ok=True)
os.makedirs(os.path.dirname(GALLERY_FILE), exist_ok=True)

def safe_yaml_value(value):
    if not value:
        return ""
    value = str(value).replace('"', "'").replace(':', ' -').replace('\n', ' ').replace('\r', ' ')
    return value.strip()

def generate_article():
    header_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –ø—Ä–∏–¥—É–º–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–µ –±–æ–ª–µ–µ –≤–æ—Å—å–º–∏ —Å–ª–æ–≤"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    try:
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ—Ä–µ–∑ OpenRouter...")
        headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}
        r = requests.post("https://openrouter.ai/api/v1/chat/completions",
                          headers=headers,
                          json={"model": "gpt-4o-mini", "messages":[{"role":"user","content":header_prompt}]})
        r.raise_for_status()
        title = r.json()["choices"][0]["message"]["content"].strip().strip('"')
        logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ OpenRouter")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        try:
            logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Groq...")
            headers_groq = {"Authorization": f"Bearer {GROQ_API_KEY}"}
            r = requests.post("https://api.groq.com/v1/chat/completions",
                              headers=headers_groq,
                              json={"model": "gpt-4o-mini", "messages":[{"role":"user","content":header_prompt}]})
            r.raise_for_status()
            title = r.json()["choices"][0]["message"]["content"].strip().strip('"')
            logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Groq")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            title = "–°—Ç–∞—Ç—å—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ –ò–ò"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    content_prompt = f"–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é 400-600 —Å–ª–æ–≤ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: {title}"
    try:
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenRouter...")
        headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}
        r = requests.post("https://openrouter.ai/api/v1/chat/completions",
                          headers=headers,
                          json={"model": "gpt-4o-mini", "messages":[{"role":"user","content":content_prompt}]})
        r.raise_for_status()
        text = r.json()["choices"][0]["message"]["content"].strip()
        logging.info("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ OpenRouter")
        return title, text, "OpenRouter GPT"
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter —Å—Ç–∞—Ç—å—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
        try:
            logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Groq...")
            headers_groq = {"Authorization": f"Bearer {GROQ_API_KEY}"}
            r = requests.post("https://api.groq.com/v1/chat/completions",
                              headers=headers_groq,
                              json={"model": "gpt-4o-mini", "messages":[{"role":"user","content":content_prompt}]})
            r.raise_for_status()
            text = r.json()["choices"][0]["message"]["content"].strip()
            logging.info("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ Groq")
            return title, text, "Groq GPT"
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return title, "–°—Ç–∞—Ç—å—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "None"

def generate_image(title, slug):
    try:
        logging.info("[SubNP] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        payload = {"prompt": title, "model": "turbo"}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        response = requests.post(f"{SUBNP_BASE_URL}/api/free/generate", 
                               headers={"Content-Type": "application/json"}, 
                               json=payload,
                               timeout=120)
        response.raise_for_status()
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
        try:
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å JSON –æ–±—ä–µ–∫—Ç–æ–º
            data = response.json()
            if data.get('status') == 'complete' and data.get('imageUrl'):
                image_url = data['imageUrl']
                logging.info(f"[SubNP] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {image_url}")
            else:
                logging.warning("‚ùå SubNP –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç")
                return PLACEHOLDER
                
        except json.JSONDecodeError:
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–º SSE
            logging.info("[SubNP] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç...")
            image_url = None
            for line in response.text.strip().split('\n'):
                if line.startswith('data: '):
                    try:
                        data = json.loads(line[6:])
                        if data.get('status') == 'complete' and data.get('imageUrl'):
                            image_url = data['imageUrl']
                            break
                    except:
                        continue
            
            if not image_url:
                logging.warning("‚ùå SubNP –Ω–µ –≤–µ—Ä–Ω—É–ª imageUrl –≤ –ø–æ—Ç–æ–∫–µ")
                return PLACEHOLDER

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_data = requests.get(image_url, timeout=30).content
        img_path = os.path.join(STATIC_DIR, f"{slug}.png")
        with open(img_path, 'wb') as f:
            f.write(img_data)
        logging.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {img_path}")
        return f"/images/posts/{slug}.png"

    except requests.exceptions.Timeout:
        logging.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return PLACEHOLDER
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return PLACEHOLDER
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return PLACEHOLDER

def save_article(title, text, model, slug, image_path):
    filename = os.path.join(POSTS_DIR, f'{slug}.md')
    front_matter = {
        'title': safe_yaml_value(title),
        'date': datetime.now().strftime("%Y-%m-%dT%H:%M:%S+03:00"),
        'image': image_path if image_path.startswith('/') else f'/{image_path}',
        'model': safe_yaml_value(model),
        'tags': ["AI", "Tech"],
        'draft': False,
        'categories': ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
    }
    yaml_content = yaml.safe_dump(front_matter, allow_unicode=True, default_flow_style=False, sort_keys=False)
    content = f"""---
{yaml_content}---

{text}
"""
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(content)
    logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")

def update_gallery(title, slug, image_path):
    gallery = []
    if os.path.exists(GALLERY_FILE):
        try:
            with open(GALLERY_FILE, 'r', encoding='utf-8') as f:
                gallery = yaml.safe_load(f) or []
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏: {e}")
            gallery = []

    gallery.insert(0, {
        "title": safe_yaml_value(title), 
        "alt": safe_yaml_value(title), 
        "src": image_path if image_path.startswith('/') else f'/{image_path}'
    })
    gallery = gallery[:20]

    try:
        with open(GALLERY_FILE, 'w', encoding='utf-8') as f:
            yaml.safe_dump(gallery, f, allow_unicode=True, default_flow_style=False)
        logging.info(f"‚úÖ –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {GALLERY_FILE}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏: {e}")

def cleanup_old_posts(keep=10):
    try:
        posts = sorted(
            glob.glob(os.path.join(POSTS_DIR, "*.md")),
            key=os.path.getmtime,
            reverse=True
        )
        if len(posts) > keep:
            for old in posts[keep:]:
                logging.info(f"üóë –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç—å—é: {old}")
                os.remove(old)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")

def main():
    try:
        title, text, model = generate_article()
        slug = slugify(title)
        image_path = generate_image(title, slug)
        save_article(title, text, model, slug, image_path)
        update_gallery(title, slug, image_path)
        cleanup_old_posts(keep=10)
        logging.info("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == "__main__":
    main()
