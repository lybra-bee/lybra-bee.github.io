#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import yaml
import logging
import requests
from datetime import datetime
from slugify import slugify
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
POSTS_DIR = Path("content/posts")
IMAGES_DIR = Path("static/images/posts")
GALLERY_JSON = Path("data/gallery.json")
MAX_POSTS = 10  # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –æ—Å—Ç–∞–≤–ª—è—Ç—å
IMAGE_WIDTH = 1200
IMAGE_HEIGHT = 630

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def remove_old_posts(posts_dir: Path, keep_last=MAX_POSTS):
    posts = sorted(posts_dir.glob("*.md"), key=os.path.getmtime, reverse=True)
    removed = []
    for post in posts[keep_last:]:
        post.unlink()
        removed.append(post)
    for p in removed:
        logging.info(f"üóë –°—Ç–∞—Ä—ã–π –ø–æ—Å—Ç —É–¥–∞–ª—ë–Ω: {p.name}")
    return removed

def save_post(title: str, content: str, image_filename: str):
    slug = slugify(title)
    filename = POSTS_DIR / f"{slug}.md"
    with open(filename, "w", encoding="utf-8") as f:
        f.write(f"---\ntitle: \"{title}\"\ndate: {datetime.now().isoformat()}\nimage: {image_filename}\n---\n\n")
        f.write(content)
    logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    return filename

def generate_image(title: str) -> str:
    filename = IMAGES_DIR / f"{slugify(title)}.jpg"
    IMAGES_DIR.mkdir(parents=True, exist_ok=True)

    # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
    img = Image.new("RGB", (IMAGE_WIDTH, IMAGE_HEIGHT), color=(73, 109, 137))
    draw = ImageDraw.Draw(img)
    font = ImageFont.load_default()
    draw.text((50, IMAGE_HEIGHT//2), title, font=font, fill=(255, 255, 0))
    img.save(filename)
    logging.info(f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {filename}")
    return str(filename)

def update_gallery(gallery_json: Path):
    images = list(IMAGES_DIR.glob("*.jpg"))
    gallery_data = [{"image": str(img), "title": img.stem} for img in images]
    with open(gallery_json, "w", encoding="utf-8") as f:
        json.dump(gallery_data, f, ensure_ascii=False, indent=2)
    logging.info(f"üé® –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ({len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")

def generate_text(title_prompt: str) -> str:
    # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
    try:
        # –ø—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ OpenAI –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ API
        content = f"–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –¥–ª—è '{title_prompt}' —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ."
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ API")
        return content
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏: {e}")
        return "–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."

def generate_title() -> str:
    try:
        title = "–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –ò–ò 2025"  # —Ç—É—Ç —Ç–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return title
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        return "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    logging.info("üöÄ –°—Ç–∞—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã
    remove_old_posts(POSTS_DIR)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title = generate_title()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
    content = generate_text(title)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = generate_image(title)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é
    save_post(title, content, image_path)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
    update_gallery(GALLERY_JSON)
    
    logging.info("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

if __name__ == "__main__":
    main()
