#!/usr/bin/env python3
import os
import json
import requests
import logging
from datetime import datetime
from slugify import slugify
import base64
import time
import yaml

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ö–ª—é—á–∏ –∏ URL ===
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
FUSIONBRAIN_KEY = os.environ.get("FUSIONBRAIN_KEY")
FUSIONBRAIN_SECRET = os.environ.get("FUSIONBRAIN_SECRET")

GROQ_URL = "https://api.groq.com/openai/v1/chat/completions"
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"
FUSIONBRAIN_URL = "https://api-key.fusionbrain.ai/"

# === –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∞—Ç—å–∏ ===
PROMPT = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –Ω–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ 400-600 —Å–ª–æ–≤."

# === –ü—É—Ç–∏ ===
POSTS_DIR = "content/posts/"
IMAGES_DIR = "static/images/"
GALLERY_FILE = "data/gallery.yaml"

os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(IMAGES_DIR, exist_ok=True)

# === –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Groq ===
def generate_article_groq():
    try:
        headers = {"Authorization": f"Bearer {GROQ_API_KEY}"}
        payload = {
            "model": "gpt-4o-mini",
            "messages": [{"role": "user", "content": PROMPT}]
        }
        r = requests.post(GROQ_URL, headers=headers, json=payload)
        r.raise_for_status()
        data = r.json()
        text = data["choices"][0]["message"]["content"]
        return text, "Groq"
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Groq –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        return None, None

# === –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenRouter ===
def generate_article_openrouter():
    try:
        headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}
        payload = {
            "model": "gpt-4o-mini",
            "messages": [{"role": "user", "content": PROMPT}]
        }
        r = requests.post(OPENROUTER_URL, headers=headers, json=payload)
        r.raise_for_status()
        data = r.json()
        text = data["choices"][0]["message"]["content"]
        return text, "OpenRouter"
    except Exception as e:
        logging.error(f"‚ùå OpenRouter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        return None, None

# === –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FusionBrain Kandinsky ===
class FusionBrainAPI:
    def __init__(self, url, api_key, secret_key):
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

    def get_pipeline(self):
        response = requests.get(self.URL + 'key/api/v1/pipelines', headers=self.AUTH_HEADERS)
        response.raise_for_status()
        data = response.json()
        return data[0]['id']

    def generate_image(self, prompt, pipeline_id, width=1024, height=1024):
        params = {
            "type": "GENERATE",
            "numImages": 1,
            "width": width,
            "height": height,
            "generateParams": {
                "query": prompt
            }
        }
        data = {
            'pipeline_id': (None, pipeline_id),
            'params': (None, json.dumps(params), 'application/json')
        }
        r = requests.post(self.URL + 'key/api/v1/pipeline/run', headers=self.AUTH_HEADERS, files=data)
        r.raise_for_status()
        uuid = r.json()['uuid']
        return uuid

    def check_generation(self, request_id, attempts=10, delay=10):
        while attempts > 0:
            r = requests.get(self.URL + f'key/api/v1/pipeline/status/{request_id}', headers=self.AUTH_HEADERS)
            r.raise_for_status()
            data = r.json()
            if data['status'] == 'DONE':
                return data['result']['files'][0]
            elif data['status'] == 'FAIL':
                raise Exception(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {data.get('errorDescription')}")
            attempts -= 1
            time.sleep(delay)
        raise Exception("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ===
def save_article(title, text, model):
    slug = slugify(title)
    date = datetime.utcnow().strftime("%Y-%m-%d")
    filename = f"{POSTS_DIR}{slug}.md"
    content = f"""---
title: "{title}"
date: {date}T00:00:00Z
draft: false
model: {model}
image: "/images/{slug}.png"
---

{text}
"""
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    return slug

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
def save_image(image_b64, slug):
    img_data = base64.b64decode(image_b64)
    path = f"{IMAGES_DIR}{slug}.png"
    with open(path, "wb") as f:
        f.write(img_data)
    logging.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {path}")

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ ===
def update_gallery(title, slug):
    entry = {"title": title, "src": f"/images/{slug}.png", "alt": title}
    gallery = []
    if os.path.exists(GALLERY_FILE):
        with open(GALLERY_FILE, "r", encoding="utf-8") as f:
            gallery = yaml.safe_load(f) or []
    gallery = [entry] + gallery[:9]  # –æ—Å—Ç–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 10
    with open(GALLERY_FILE, "w", encoding="utf-8") as f:
        yaml.dump(gallery, f, allow_unicode=True)
    logging.info(f"‚úÖ –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {GALLERY_FILE}")

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...")

    text, model = generate_article_groq()
    if not text:
        text, model = generate_article_openrouter()
        if not text:
            logging.error("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return

    title = text.split("\n")[0][:60]  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    slug = save_article(title, text, model)

    logging.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain...")
    try:
        fb = FusionBrainAPI(FUSIONBRAIN_URL, FUSIONBRAIN_KEY, FUSIONBRAIN_SECRET)
        pipeline_id = fb.get_pipeline()
        uuid = fb.generate_image(title, pipeline_id)
        image_b64 = fb.check_generation(uuid)
        save_image(image_b64, slug)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    update_gallery(title, slug)

if __name__ == "__main__":
    main()
