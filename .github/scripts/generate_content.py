#!/usr/bin/env python3
import os
import shutil
import logging
from datetime import datetime
from slugify import slugify
import requests
import yaml

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
POSTS_DIR = "content/posts"
STATIC_IMG_DIR = "static/images/posts"
ASSETS_GALLERY_DIR = "assets/gallery"
GALLERY_FILE = "data/gallery.yaml"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ---
os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(STATIC_IMG_DIR, exist_ok=True)
os.makedirs(ASSETS_GALLERY_DIR, exist_ok=True)

# --- –§—É–Ω–∫—Ü–∏–∏ ---

def generate_article_title():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ—Ä–µ–∑ OpenRouter/GROQ (—Ä–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)"""
    prompt = ("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–µ–π—Å—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ "
              "–∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏, "
              "–Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –º–µ–¥–∏—Ü–∏–Ω–µ, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ, –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, "
              "–∏–ª–∏ –ø–æ—à–∞–≥–æ–≤—ã–π —É—Ä–æ–∫ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é. –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è —Å–ª–æ–≤–æ–º '—Ç—Ä–µ–Ω–¥—ã'.")
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ API
    response = requests.post(
        "https://api.openrouter.ai/v1/chat/completions",
        headers={"Authorization": f"Bearer {os.environ.get('OPENROUTER_API_KEY')}"},
        json={
            "model": "gpt-4.1-mini",
            "messages": [{"role": "user", "content": prompt}]
        }
    )
    data = response.json()
    title = data["choices"][0]["message"]["content"].strip()
    return title

def generate_article_text(title):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ API"""
    prompt = f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç—å—é –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: {title}"
    response = requests.post(
        "https://api.openrouter.ai/v1/chat/completions",
        headers={"Authorization": f"Bearer {os.environ.get('OPENROUTER_API_KEY')}"},
        json={
            "model": "gpt-4.1-mini",
            "messages": [{"role": "user", "content": prompt}]
        }
    )
    data = response.json()
    text = data["choices"][0]["message"]["content"].strip()
    return text

def generate_image(title):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Å—Ç–∞—Ç—å–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä)"""
    # –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    filename = slugify(title) + ".png"
    static_path = os.path.join(STATIC_IMG_DIR, filename)
    with open(static_path, "wb") as f:
        f.write(requests.get("https://via.placeholder.com/800x400.png?text=" + title.replace(" ","+")).content)
    logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {static_path}")
    # –ö–æ–ø–∏—Ä—É–µ–º –≤ assets/gallery
    shutil.copy(static_path, os.path.join(ASSETS_GALLERY_DIR, filename))
    return filename

def save_article(title, text, img_filename):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é –≤ content/posts"""
    slug = slugify(title)
    post_file = os.path.join(POSTS_DIR, f"{slug}.md")
    front_matter = (
        f"---\n"
        f'title: "{title}"\n'
        f'date: "{datetime.now().strftime("%Y-%m-%d")}"\n'
        f'image: "/images/posts/{img_filename}"\n'
        f'tags: ["ai","tech"]\n'
        f"---\n\n"
        f"{text}\n"
    )
    with open(post_file, "w", encoding="utf-8") as f:
        f.write(front_matter)
    logging.info(f"–°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {post_file}")

def update_gallery():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ data/gallery.yaml –∏–∑ assets/gallery"""
    files = os.listdir(ASSETS_GALLERY_DIR)
    gallery_items = []
    for f in files:
        if f.lower().endswith((".png",".jpg",".jpeg",".svg")):
            gallery_items.append({
                "src": f"/assets/gallery/{f}",
                "alt": os.path.splitext(f)[0],
                "date": datetime.now().strftime("%Y-%m-%d")
            })
    with open(GALLERY_FILE, "w", encoding="utf-8") as f:
        yaml.dump(gallery_items, f, allow_unicode=True)
    logging.info(f"–ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(gallery_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ---
if __name__ == "__main__":
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏...")
    title = generate_article_title()
    text = generate_article_text(title)
    img_filename = generate_image(title)
    save_article(title, text, img_filename)
    update_gallery()
    logging.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
