#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
generate_content.py
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—å—é (OpenRouter -> Groq fallback),
—Å–æ–∑–¥–∞—ë—Ç SVG-–∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏,
–æ–±–Ω–æ–≤–ª—è–µ—Ç data/gallery.yaml –∏ data/gallery.json,
—É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ .md —Å—Ç–∞—Ç—å–∏ (–æ—Å—Ç–∞–≤–ª—è–µ—Ç KEEP_POSTS),
–Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
"""

import os
import sys
import time
import json
import yaml
import logging
import requests
import glob
from datetime import datetime
from slugify import slugify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ü–∞–ø–∫–∏ / –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
POSTS_DIR = "content/posts"
STATIC_IMAGES_DIR = "static/images/posts"
DATA_DIR = "data"
GALLERY_YAML = os.path.join(DATA_DIR, "gallery.yaml")
GALLERY_JSON = os.path.join(DATA_DIR, "gallery.json")
PLACEHOLDER = "static/images/placeholder.jpg"
KEEP_POSTS = 10  # —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π —Å–æ—Ö—Ä–∞–Ω—è—Ç—å

# API –∫–ª—é—á–∏
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")

# Ensure dirs exist
os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(STATIC_IMAGES_DIR, exist_ok=True)
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(os.path.dirname(PLACEHOLDER), exist_ok=True)

# --- Helpers ---
def safe_yaml_value(v):
    if v is None:
        return ""
    return str(v).replace("\r", " ").replace("\n", " ").strip()

def try_extract_openrouter_response(data):
    try:
        if isinstance(data, dict):
            if "choices" in data and data["choices"]:
                c = data["choices"][0]
                if isinstance(c, dict):
                    if "message" in c and isinstance(c["message"], dict) and "content" in c["message"]:
                        return c["message"]["content"]
                    if "text" in c:
                        return c["text"]
            if "output" in data and isinstance(data["output"], list) and data["output"]:
                first = data["output"][0]
                if isinstance(first, dict) and "content" in first:
                    return first["content"]
        return None
    except Exception:
        return None

def generate_with_openrouter_chat(prompt, max_tokens=800, model="gpt-4o-mini"):
    if not OPENROUTER_API_KEY:
        logging.debug("OPENROUTER_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return None
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
    payload = {"model": model, "messages": [{"role": "user", "content": prompt}], "max_tokens": max_tokens}
    try:
        r = requests.post(url, headers=headers, json=payload, timeout=60)
        r.raise_for_status()
        data = r.json()
        text = try_extract_openrouter_response(data)
        if text:
            return text.strip()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter(chat) failed: {e}")
    return None

def generate_with_openrouter_completions(prompt, max_tokens=1200, model="gpt-4o-mini"):
    if not OPENROUTER_API_KEY:
        return None
    url = "https://openrouter.ai/api/v1/completions"
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
    payload = {"model": model, "input": prompt, "max_tokens": max_tokens}
    try:
        r = requests.post(url, headers=headers, json=payload, timeout=60)
        r.raise_for_status()
        data = r.json()
        if isinstance(data, dict):
            if "output" in data and isinstance(data["output"], list) and data["output"]:
                out = data["output"][0]
                if isinstance(out, dict) and "content" in out:
                    return out["content"]
            if "choices" in data and data["choices"]:
                c = data["choices"][0]
                if isinstance(c, dict) and "text" in c:
                    return c["text"]
        return None
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter(completions) failed: {e}")
    return None

def generate_with_groq_chat(prompt, max_tokens=1200, model="gpt-4o-mini"):
    if not GROQ_API_KEY:
        logging.debug("GROQ_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return None
    endpoints = [
        "https://api.groq.com/openai/v1/chat/completions",
        "https://api.groq.com/v1/chat/completions",
        "https://api.groq.com/v1/predict",
    ]
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}
    for url in endpoints:
        try:
            payload = {"model": model, "messages": [{"role": "user", "content": prompt}], "max_tokens": max_tokens}
            r = requests.post(url, headers=headers, json=payload, timeout=60)
            r.raise_for_status()
            data = r.json()
            if isinstance(data, dict):
                if "choices" in data and data["choices"]:
                    c = data["choices"][0]
                    if isinstance(c, dict):
                        if "message" in c and "content" in c["message"]:
                            return c["message"]["content"].strip()
                        if "text" in c:
                            return c["text"].strip()
                if "prediction" in data:
                    return str(data["prediction"]).strip()
                if "output" in data and isinstance(data["output"], list) and data["output"]:
                    first = data["output"][0]
                    if isinstance(first, dict) and "content" in first:
                        return first["content"].strip()
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Groq endpoint {url} failed: {e}")
            continue
    return None

# --- High level generators ---
def generate_title(year):
    prompt = (
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ "
        f"–∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∑–∞ {year} –≥–æ–¥ –∏ –ø—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, —ë–º–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ "
        f"–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–µ–º–∞—Ç–∏–∫–∞ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å: AI –≤ –º–µ–¥–∏—Ü–∏–Ω–µ, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ, "
        f"–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏, –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ "
        f"—É—Ä–æ–∫–∏ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º."
    )
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (OpenRouter -> Groq)...")
    text = generate_with_openrouter_chat(prompt, max_tokens=70)
    if text:
        logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–µ–∑ OpenRouter")
        return text.strip().strip('"')
    text = generate_with_openrouter_completions(prompt, max_tokens=70)
    if text:
        logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–µ–∑ OpenRouter (completions)")
        return text.strip().strip('"')
    text = generate_with_groq_chat(prompt, max_tokens=70)
    if text:
        logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–µ–∑ Groq")
        return text.strip().strip('"')
    logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç API ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫")
    return f"AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ {year}"

def generate_article_text(title, year):
    prompt = f"–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: ¬´{title}¬ª. –û–±—ä—ë–º 400-600 —Å–ª–æ–≤. –í–∫–ª—é—á–∏ –≤–≤–µ–¥–µ–Ω–∏–µ, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ."
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ (OpenRouter -> Groq)...")
    text = generate_with_openrouter_chat(prompt, max_tokens=1100)
    if text:
        logging.info("‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ OpenRouter")
        return text
    text = generate_with_openrouter_completions(prompt, max_tokens=1100)
    if text:
        logging.info("‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ OpenRouter (completions)")
        return text
    text = generate_with_groq_chat(prompt, max_tokens=1100)
    if text:
        logging.info("‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Groq")
        return text
    logging.warning("‚ö†Ô∏è –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–π fallback")
    return (
        f"## –í–≤–µ–¥–µ–Ω–∏–µ\n\n–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ {year} –≥–æ–¥—É –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è. "
        "–ù–∏–∂–µ ‚Äî —Å–≤–æ–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.\n\n"
        "## –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n- –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è.\n"
        "- –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∑–≤—É–∫.\n"
        "- –í–Ω–∏–º–∞–Ω–∏–µ –∫ —ç—Ç–∏–∫–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ç—ë—Ç.\n\n"
        "## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\nAI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –∏–∑–º–µ–Ω—è—Ç—å –º–∏—Ä."
    )

def save_article(title, text):
    slug = slugify(title)
    filename = os.path.join(POSTS_DIR, f"{slug}.md")
    logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é –≤ {filename}")
    with open(filename, "w", encoding="utf-8") as f:
        f.write(f"---\ntitle: {title}\ndate: '{datetime.now().strftime('%Y-%m-%d')}'\nslug: {slug}\n---\n\n{text}\n")
    return filename

# --- Gallery generation ---
def collect_gallery_images():
    images = []
    for ext in ("*.jpg", "*.jpeg", "*.png", "*.gif", "*.svg", "*.webp"):
        images.extend(glob.glob(os.path.join(STATIC_IMAGES_DIR, ext)))
    images = sorted(images)
    gallery = []
    for img in images:
        filename = os.path.basename(img)
        gallery.append({
            "src": f"/images/posts/{filename}",
            "alt": os.path.splitext(filename)[0].replace("-", " ").capitalize(),
            "title": os.path.splitext(filename)[0].replace("-", " ").capitalize(),
            "date": datetime.now().strftime("%Y-%m-%d")
        })
    return gallery

def save_gallery(gallery):
    logging.info("üíæ –û–±–Ω–æ–≤–ª—è–µ–º data/gallery.yaml –∏ data/gallery.json")
    with open(GALLERY_YAML, "w", encoding="utf-8") as f:
        yaml.safe_dump(gallery, f, allow_unicode=True)
    with open(GALLERY_JSON, "w", encoding="utf-8") as f:
        json.dump(gallery, f, ensure_ascii=False, indent=2)

# --- Cleanup old posts ---
def cleanup_old_posts():
    files = sorted(glob.glob(os.path.join(POSTS_DIR, "*.md")), key=os.path.getmtime, reverse=True)
    old = files[KEEP_POSTS:]
    for f in old:
        logging.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç—å—é {f}")
        os.remove(f)

# --- Main ---
def main():
    year = datetime.now().year
    title = generate_title(year)
    text = generate_article_text(title, year)
    save_article(title, text)
    gallery = collect_gallery_images()
    save_gallery(gallery)
    cleanup_old_posts()
    logging.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    main()
