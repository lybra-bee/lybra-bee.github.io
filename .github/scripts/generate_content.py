#!/usr/bin/env python3
import os
import glob
import logging
from datetime import datetime
from slugify import slugify
import yaml

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

POSTS_DIR = 'content/posts'
STATIC_DIR = 'static/images/posts'
GALLERY_FILE = 'data/gallery.yaml'
PLACEHOLDER = 'static/images/placeholder.jpg'

os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(STATIC_DIR, exist_ok=True)
os.makedirs(os.path.dirname(GALLERY_FILE), exist_ok=True)

def safe_yaml_value(value):
    if not value: return ""
    return str(value).replace('"', "'").replace(':', ' -').replace('\n', ' ').replace('\r', ' ').strip()

def generate_article():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ç–µ–∫—Å—Ç–∞ (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    title = f"–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç {datetime.now().year}: –¢—Ä–µ–Ω–¥—ã, –º–µ–Ω—è—é—â–∏–µ –º–∏—Ä"
    text = f"""–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏. –í {datetime.now().year} –≥–æ–¥—É –º—ã –Ω–∞–±–ª—é–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤:

1. –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π AI - –º–æ–¥–µ–ª–∏ —Ç–∏–ø–∞ GPT —Å—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —à–∏—Ä–æ–∫–æ–π –ø—É–±–ª–∏–∫–µ.
2. –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å - AI —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∞—É–¥–∏–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
3. –≠—Ç–∏—á–µ—Å–∫–∏–π AI - –ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç—Ç–∏–∫–µ.

–≠—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–µ–Ω—è—é—Ç –Ω–∞—à—É –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã."""
    return title, text, "AI Generator"

def generate_image(title, slug):
    """–°–æ–∑–¥–∞–Ω–∏–µ SVG-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏"""
    try:
        img_path = os.path.join(STATIC_DIR, f"{slug}.svg")
        safe_title = title.replace('"', '').replace("'", "")
        svg_content = f'''<svg width="1200" height="630" xmlns="http://www.w3.org/2000/svg">
<defs>
<linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
<stop offset="0%" stop-color="#667eea"/>
<stop offset="100%" stop-color="#764ba2"/>
</linearGradient>
</defs>
<rect width="100%" height="100%" fill="url(#grad)"/>
<text x="600" y="300" font-family="Arial" font-size="48" fill="white" text-anchor="middle" font-weight="bold">
{safe_title}
</text>
<text x="600" y="380" font-family="Arial" font-size="24" fill="rgba(255,255,255,0.8)" text-anchor="middle">
AI Generated Content
</text>
</svg>'''
        with open(img_path, 'w', encoding='utf-8') as f:
            f.write(svg_content)
        logging.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {img_path}")
        return f"/images/posts/{slug}.svg"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return PLACEHOLDER

def update_gallery():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥–∞–ª–µ—Ä–µ—é –ø–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ STATIC_DIR"""
    try:
        gallery = []
        files = sorted(glob.glob(os.path.join(STATIC_DIR, "*.*")), key=os.path.getmtime, reverse=True)
        for f in files:
            name = os.path.splitext(os.path.basename(f))[0]
            gallery.append({
                "title": name,
                "alt": name,
                "src": f"/images/posts/{os.path.basename(f)}",
                "date": datetime.now().strftime("%Y-%m-%d"),
                "tags": ["AI", "Tech"]
            })
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        gallery = gallery[:20]

        with open(GALLERY_FILE, 'w', encoding='utf-8') as f:
            yaml.safe_dump(gallery, f, allow_unicode=True, default_flow_style=False)
        logging.info(f"‚úÖ –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(gallery)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏: {e}")

def save_article(title, text, model, slug, image_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—å—é —Å frontmatter"""
    try:
        filename = os.path.join(POSTS_DIR, f'{slug}.md')
        front_matter = {
            'title': safe_yaml_value(title),
            'date': datetime.now().strftime("%Y-%m-%dT%H:%M:%S+03:00"),
            'image': image_path,
            'draft': False,
            'tags': ["AI", "Tech", "–ù–µ–π—Ä–æ—Å–µ—Ç–∏"],
            'categories': ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
            'author': model,
            'type': "posts",
            'description': safe_yaml_value(text[:150] + "..." if len(text) > 150 else text)
        }
        yaml_content = yaml.safe_dump(front_matter, allow_unicode=True, default_flow_style=False, sort_keys=False)
        content = f"""---
{yaml_content}---

{text}
"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏: {e}")

def cleanup_old_posts(keep=5):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º"""
    try:
        posts = sorted(glob.glob(os.path.join(POSTS_DIR, "*.md")), key=os.path.getmtime, reverse=True)
        if len(posts) > keep:
            for old_post in posts[keep:]:
                os.remove(old_post)
                logging.info(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç–∞—Ç—å—è: {old_post}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

def main():
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")

        title, text, model = generate_article()
        slug = slugify(title)
        logging.info(f"üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: {title}")

        image_path = generate_image(title, slug)
        logging.info(f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")

        save_article(title, text, model, slug, image_path)

        update_gallery()

        cleanup_old_posts(keep=5)

        logging.info("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
