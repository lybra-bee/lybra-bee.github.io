#!/usr/bin/env python3
import os
import json
import requests
import time
import base64
import logging
import glob
from datetime import datetime
from slugify import slugify
import yaml

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# API –∫–ª—é—á–∏
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")

# SubNP
SUBNP_URL = "https://subnp.com/api/free/generate"

# –ü–∞–ø–∫–∏
POSTS_DIR = 'content/posts'
STATIC_DIR = 'static/images/posts'
GALLERY_FILE = 'data/gallery.yaml'
PLACEHOLDER = 'static/images/placeholder.jpg'

os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(STATIC_DIR, exist_ok=True)
os.makedirs(os.path.dirname(PLACEHOLDER), exist_ok=True)
os.makedirs(os.path.dirname(GALLERY_FILE), exist_ok=True)


def safe_yaml_value(value):
    if not value:
        return ""
    return str(value).replace('"', "'").replace(':', ' -').replace('\n', ' ').replace('\r', ' ').strip()


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å—Ç–∞—Ç—å–∏ ===
def generate_article():
    header_prompt = "–ü—Ä–∏–¥—É–º–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (‚â§ 8 —Å–ª–æ–≤) –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö."

    try:
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ—Ä–µ–∑ OpenRouter...")
        r = requests.post("https://openrouter.ai/api/v1/chat/completions",
                          headers={"Authorization": f"Bearer {OPENROUTER_API_KEY}"},
                          json={"model": "gpt-4o-mini",
                                "messages":[{"role":"user","content":header_prompt}]})
        r.raise_for_status()
        title = r.json()["choices"][0]["message"]["content"].strip().strip('"')
        logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–µ–∑ OpenRouter")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        try:
            logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Groq...")
            r = requests.post("https://api.groq.com/v1/chat/completions",
                              headers={"Authorization": f"Bearer {GROQ_API_KEY}"},
                              json={"model": "gpt-4o-mini",
                                    "messages":[{"role":"user","content":header_prompt}]})
            r.raise_for_status()
            title = r.json()["choices"][0]["message"]["content"].strip().strip('"')
            logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ä–µ–∑ Groq")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            title = "–ù–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –ò–ò"

    content_prompt = f"–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é 400-600 —Å–ª–æ–≤ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: {title}"
    try:
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenRouter...")
        r = requests.post("https://openrouter.ai/api/v1/chat/completions",
                          headers={"Authorization": f"Bearer {OPENROUTER_API_KEY}"},
                          json={"model": "gpt-4o-mini",
                                "messages":[{"role":"user","content":content_prompt}]})
        r.raise_for_status()
        text = r.json()["choices"][0]["message"]["content"].strip()
        logging.info("‚úÖ –°—Ç–∞—Ç—å—è —á–µ—Ä–µ–∑ OpenRouter")
        return title, text, "OpenRouter GPT"
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter —Å—Ç–∞—Ç—å—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
        try:
            logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Groq...")
            r = requests.post("https://api.groq.com/v1/chat/completions",
                              headers={"Authorization": f"Bearer {GROQ_API_KEY}"},
                              json={"model": "gpt-4o-mini",
                                    "messages":[{"role":"user","content":content_prompt}]})
            r.raise_for_status()
            text = r.json()["choices"][0]["message"]["content"].strip()
            logging.info("‚úÖ –°—Ç–∞—Ç—å—è —á–µ—Ä–µ–∑ Groq")
            return title, text, "Groq GPT"
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return title, "–°—Ç–∞—Ç—å—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "None"


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
def generate_image(title, slug):
    try:
        logging.info("[SubNP] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        r = requests.post(SUBNP_URL,
                          headers={"Content-Type": "application/json"},
                          json={"prompt": title, "model": "turbo"},
                          stream=True)
        r.raise_for_status()

        image_url = None
        for line in r.iter_lines():
            if not line:
                continue
            if line.startswith(b"data: "):
                try:
                    data = json.loads(line[len(b"data: "):].decode("utf-8"))
                    if data.get("status") == "complete" and "imageUrl" in data:
                        image_url = data["imageUrl"]
                        break
                except Exception:
                    continue

        if not image_url:
            logging.error("[SubNP] –ù–µ –ø–æ–ª—É—á–∏–ª–∏ complete -> imageUrl")
            return PLACEHOLDER

        img = requests.get(image_url)
        img.raise_for_status()
        img_path = os.path.join(STATIC_DIR, f"{slug}.png")
        with open(img_path, "wb") as f:
            f.write(img.content)
        logging.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {img_path}")
        return f"/images/posts/{slug}.png"

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ SubNP: {e}")
        return PLACEHOLDER


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ===
def save_article(title, text, model, slug, image_path):
    filename = os.path.join(POSTS_DIR, f'{slug}.md')
    front_matter = {
        'title': safe_yaml_value(title),
        'date': datetime.now().strftime("%Y-%m-%dT%H:%M:%S+03:00"),
        'image': image_path,
        'model': safe_yaml_value(model),
        'tags': ["AI", "Tech"],
        'draft': False,
        'categories': ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
    }
    yaml_content = yaml.safe_dump(front_matter, allow_unicode=True, sort_keys=False)
    content = f"---\n{yaml_content}---\n\n{text}\n"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(content)
    logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")


# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ ===
def update_gallery(title, slug, image_path):
    gallery = []
    if os.path.exists(GALLERY_FILE):
        with open(GALLERY_FILE, 'r', encoding='utf-8') as f:
            gallery = yaml.safe_load(f) or []
    gallery.insert(0, {"title": safe_yaml_value(title), "alt": safe_yaml_value(title), "src": image_path})
    gallery = gallery[:20]
    with open(GALLERY_FILE, 'w', encoding='utf-8') as f:
        yaml.safe_dump(gallery, f, allow_unicode=True, sort_keys=False)
    logging.info(f"‚úÖ –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {GALLERY_FILE}")


# === –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ ===
def cleanup_old_posts(keep=10):
    posts = sorted(glob.glob(os.path.join(POSTS_DIR, "*.md")), key=os.path.getmtime, reverse=True)
    if len(posts) > keep:
        for old in posts[keep:]:
            logging.info(f"üóë –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç—å—é: {old}")
            os.remove(old)


def main():
    try:
        title, text, model = generate_article()
        slug = slugify(title)
        image_path = generate_image(title, slug)
        save_article(title, text, model, slug, image_path)
        update_gallery(title, slug, image_path)
        cleanup_old_posts(keep=10)
        logging.info("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
