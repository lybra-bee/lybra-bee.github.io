#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import requests
import logging
import time
from datetime import datetime
from slugify import slugify
import base64
import yaml

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–ª—é—á–∏)
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
FUSIONBRAIN_KEY = os.getenv("FUSIONBRAIN_KEY")
FUSIONBRAIN_SECRET = os.getenv("FUSIONBRAIN_SECRET")

# –ü–∞–ø–∫–∏
POSTS_DIR = "content/posts"
GALLERY_FILE = "data/gallery.yaml"

# ------------------- GROQ ------------------- #
def generate_article(prompt=None):
    if not prompt:
        prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –Ω–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ 400-600 —Å–ª–æ–≤."
    url = "https://api.groq.com/v1/chat/completions"
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "model": "gpt-4o-mini",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }
    try:
        r = requests.post(url, headers=headers, json=payload)
        r.raise_for_status()
        data = r.json()
        text = data['choices'][0]['message']['content']
        logging.info("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ Groq")
        return text, "Groq GPT-4o-mini"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        return None, None

# ------------------- FusionBrain ------------------- #
class FusionBrainAPI:
    def __init__(self):
        self.URL = "https://api-key.fusionbrain.ai/"
        self.AUTH_HEADERS = {
            'X-Key': f'Key {FUSIONBRAIN_KEY}',
            'X-Secret': f'Secret {FUSIONBRAIN_SECRET}',
        }

    def get_pipeline(self):
        r = requests.get(self.URL + 'key/api/v1/pipelines', headers=self.AUTH_HEADERS)
        r.raise_for_status()
        data = r.json()
        return data[0]['uuid']  # UUID –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏ Kandinsky

    def generate(self, prompt, pipeline_id, width=1024, height=1024):
        params = {
            "type": "GENERATE",
            "numImages": 1,
            "width": width,
            "height": height,
            "generateParams": {"query": prompt}
        }
        files = {
            'pipeline_id': (None, pipeline_id),
            'params': (None, json.dumps(params), 'application/json')
        }
        r = requests.post(self.URL + 'key/api/v1/pipeline/run', headers=self.AUTH_HEADERS, files=files)
        r.raise_for_status()
        data = r.json()
        return data['uuid']

    def check_generation(self, request_id, attempts=10, delay=5):
        while attempts > 0:
            r = requests.get(self.URL + f'key/api/v1/pipeline/status/{request_id}', headers=self.AUTH_HEADERS)
            r.raise_for_status()
            data = r.json()
            if data['status'] == 'DONE':
                return data['result']['files'][0]  # Base64
            elif data['status'] == 'FAIL':
                raise Exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            attempts -= 1
            time.sleep(delay)
        raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# ------------------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ------------------- #
def save_article(title, text, model):
    slug = slugify(title)
    filename = f"{POSTS_DIR}/{slug}.md"
    date = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")
    content = f"---\ntitle: \"{title}\"\ndate: {date}\nmodel: {model}\nimage: /images/{slug}.png\ntype: posts\n---\n\n{text}\n"
    os.makedirs(POSTS_DIR, exist_ok=True)
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    return slug

# ------------------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ------------------- #
def save_image(slug, b64_content):
    os.makedirs("static/images", exist_ok=True)
    path = f"static/images/{slug}.png"
    img_data = base64.b64decode(b64_content)
    with open(path, "wb") as f:
        f.write(img_data)
    logging.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {path}")
    return f"/images/{slug}.png"

# ------------------- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ ------------------- #
def update_gallery(slug, title, img_url):
    gallery = []
    if os.path.exists(GALLERY_FILE):
        with open(GALLERY_FILE, "r", encoding="utf-8") as f:
            gallery = yaml.safe_load(f) or []
    gallery.insert(0, {"src": img_url, "alt": title, "title": title})
    with open(GALLERY_FILE, "w", encoding="utf-8") as f:
        yaml.dump(gallery, f, allow_unicode=True)
    logging.info(f"‚úÖ –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {GALLERY_FILE}")

# ------------------- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ ------------------- #
def main():
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...")
    text, model = generate_article()
    if not text:
        logging.error("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        return

    title = text.split('\n')[0][:80]  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    slug = save_article(title, text, model)

    logging.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain...")
    try:
        api = FusionBrainAPI()
        pipeline_id = api.get_pipeline()
        uuid = api.generate(title, pipeline_id)
        b64_image = api.check_generation(uuid)
        img_url = save_image(slug, b64_image)
        update_gallery(slug, title, img_url)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    main()
