#!/usr/bin/env python3
import os
import json
import requests
import time
import base64
import logging
from datetime import datetime
from slugify import slugify
import yaml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# API –∫–ª—é—á–∏
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
FUSION_API_KEY = os.environ.get("FUSIONBRAIN_API_KEY")
FUSION_SECRET_KEY = os.environ.get("FUSION_SECRET_KEY")
BASE_URL = 'https://api-key.fusionbrain.ai/'

AUTH_HEADERS = {
    'X-Key': f'Key {FUSION_API_KEY}',
    'X-Secret': f'Secret {FUSION_SECRET_KEY}',
}

# –ü–∞–ø–∫–∏
POSTS_DIR = 'content/posts'
ASSETS_DIR = 'static/images/posts'
GALLERY_FILE = 'data/gallery.yaml'
PLACEHOLDER = 'static/images/placeholder.jpg'

os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(ASSETS_DIR, exist_ok=True)
os.makedirs(os.path.dirname(PLACEHOLDER), exist_ok=True)

def generate_title():
    prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ —Å–æ–∑–¥–∞–π —ë–º–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—å–∏."
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}

    # OpenRouter
    try:
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ—Ä–µ–∑ OpenRouter...")
        r = requests.post("https://openrouter.ai/api/v1/chat/completions",
                          headers=headers,
                          json={"model": "gpt-4o-mini", "messages":[{"role":"user","content":prompt}]})
        r.raise_for_status()
        title = r.json()["choices"][0]["message"]["content"].strip().replace('"', '')
        logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ OpenRouter")
        return title, "OpenRouter GPT"
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # Groq fallback
    try:
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Groq...")
        headers = {"Authorization": f"Bearer {GROQ_API_KEY}"}
        r = requests.post("https://api.groq.com/v1/chat/completions",
                          headers=headers,
                          json={"model": "gpt-4o-mini", "messages":[{"role":"user","content":prompt}]})
        r.raise_for_status()
        title = r.json()["choices"][0]["message"]["content"].strip().replace('"', '')
        logging.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Groq")
        return title, "Groq GPT"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
        return "–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è", "None"

def generate_article(title):
    prompt = f"–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ 400-600 —Å–ª–æ–≤ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: {title}"
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}

    # OpenRouter
    try:
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenRouter...")
        r = requests.post("https://openrouter.ai/api/v1/chat/completions",
                          headers=headers,
                          json={"model": "gpt-4o-mini", "messages":[{"role":"user","content":prompt}]})
        r.raise_for_status()
        text = r.json()["choices"][0]["message"]["content"]
        logging.info("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ OpenRouter")
        return text, "OpenRouter GPT"
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # Groq fallback
    try:
        logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Groq...")
        headers = {"Authorization": f"Bearer {GROQ_API_KEY}"}
        r = requests.post("https://api.groq.com/v1/chat/completions",
                          headers=headers,
                          json={"model": "g
