name: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ Telegram

on:
  workflow_dispatch:  # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

jobs:
  send_post:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      - name: Extract last post data
        run: |
          python -c "
import glob
import yaml
import os
import re
post_files = sorted(glob.glob('_posts/*.md'), reverse=True)
if not post_files:
  print('::error::No posts found in _posts/')
  exit(1)
with open(post_files[0], 'r', encoding='utf-8') as f:
  content = f.read()
  try:
    front_matter = content.split('---')[1]
    data = yaml.safe_load(front_matter) or {}
  except IndexError:
    print('::error::Invalid YAML front-matter')
    exit(1)
title = data.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
date = data.get('date', '2025/01/01').split(' ')[0].replace('-', '/')
slug = post_files[0].split('/')[-1].split('-', 3)[-1].replace('.md', '') if '-' in post_files[0] else 'no-slug'
post_num = data.get('image', '').split('-')[-1].replace('.png', '') if 'image' in data else '1'
body = content.split('---')[2].strip() if len(content.split('---')) > 2 else ''
body = re.sub(r'^#{1,}\s.*$', '', body, flags=re.MULTILINE).strip()
body = re.sub(r'\*{1,2}(.*?)\*{1,2}', r'\1', body)
body = re.sub(r'\n\s*\n', ' ', body).strip()
words = ' '.join([w for w in body.split() if w]).split()[:50]
teaser = ' '.join(words) + ('...' if len(words) == 50 else '') if words else '–¢–∏–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏.'
os.environ['TITLE'] = title
os.environ['DATE'] = date
os.environ['SLUG'] = slug
os.environ['POST_NUM'] = post_num
os.environ['TEASER'] = teaser
print(f'Title: {title}, Date: {date}, Slug: {slug}, Post Num: {post_num}, Teaser: {teaser}')
"
      - name: Escape teaser for MarkdownV2
        run: |
          TEASER="${{ env.TEASER }}"
          for char in _ * [ ] \( \) ~ \` \> \# \+ \- \= \| \{ \} \. \!; do
            TEASER=$(echo "$TEASER" | sed "s/$char/\\\\$char/g")
          done
          echo "TEASER=$TEASER" >> $GITHUB_ENV
      - name: Log extracted data
        run: |
          echo "TITLE: ${{ env.TITLE }}"
          echo "DATE: ${{ env.DATE }}"
          echo "SLUG: ${{ env.SLUG }}"
          echo "POST_NUM: ${{ env.POST_NUM }}"
          echo "TEASER: ${{ env.TEASER }}"
      - name: Send to Telegram
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          parse_mode: MarkdownV2
          message: |
            üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç: "${{ env.TITLE }}"

            –ö—Ä–∞—Ç–∫–∏–π —Ç–∏–∑–µ—Ä: ${{ env.TEASER }}

            –ß–∏—Ç–∞—Ç—å: https://lybra-ai.ru/${{ env.DATE }}/${{ env.SLUG }}?utm_source=telegram&utm_medium=channel&utm_campaign=post

            #–ò–ò #–¢—Ä–µ–Ω–¥—ã2025 #LybraAI
          photo: https://lybra-ai.ru/assets/images/posts/post-${{ env.POST_NUM }}.png
      - name: Log Telegram step
        run: |
          echo "TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}"
          echo "Post title: ${{ env.TITLE }}"
          echo "Teaser: ${{ env.TEASER }}"
          echo "URL: https://lybra-ai.ru/${{ env.DATE }}/${{ env.SLUG }}"
