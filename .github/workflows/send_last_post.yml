name: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ Telegram

on:
  workflow_dispatch:

jobs:
  send_post:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      - name: Check post files
        run: |
          ls -l _posts/ || echo "No posts directory found"
          if [ -z "$(ls -A _posts/)" ]; then
            echo "::error::No Markdown files found in _posts/"
            exit 1
          fi
      - name: Check extract_post_data.py
        run: |
          ls -l extract_post_data.py || echo "::error::extract_post_data.py not found"
          if [ ! -f extract_post_data.py ]; then
            exit 1
          fi
      - name: Extract last post data
        run: |
          python extract_post_data.py
      - name: Validate extracted data
        run: |
          if [ -z "$TITLE" ]; then
            echo "::error::TITLE is empty"
            exit 1
          fi
          if [ -z "$DATE" ]; then
            echo "::error::DATE is empty"
            exit 1
          fi
          if [ -z "$SLUG" ]; then
            echo "::error::SLUG is empty"
            exit 1
          fi
          if [ -z "$POST_NUM" ]; then
            echo "::error::POST_NUM is empty, check front-matter 'image' in post"
            exit 1
          fi
      - name: Check image file
        run: |
          IMAGE_PATH="assets/images/posts/post-$POST_NUM.png"
          ls -l $IMAGE_PATH || echo "Image file $IMAGE_PATH not found in repository"
          if [ -f "$IMAGE_PATH" ]; then
            echo "IMAGE_FOUND=true" >> $GITHUB_ENV
          else
            echo "IMAGE_FOUND=false" >> $GITHUB_ENV
          fi
      - name: Check image URL
        run: |
          IMAGE_URL="https://lybra-ai.ru/assets/images/posts/post-$POST_NUM.png"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$IMAGE_URL")
          echo "Image URL $IMAGE_URL status: HTTP $HTTP_STATUS"
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "IMAGE_URL_ACCESSIBLE=true" >> $GITHUB_ENV
            echo "PHOTO_URL=$IMAGE_URL" >> $GITHUB_ENV
          else
            echo "IMAGE_URL_ACCESSIBLE=false" >> $GITHUB_ENV
            echo "PHOTO_URL=" >> $GITHUB_ENV
          fi
      - name: Prepare Telegram message
        run: |
          TITLE_ESCAPED=$(echo "$TITLE" | sed 's/[ _*[\]()~`>#+-=|{}\.!]/\\&/g')
          echo "TITLE_ESCAPED=$TITLE_ESCAPED" >> $GITHUB_ENV
          TEASER="${TEASER}"
          if [ -z "$TEASER" ]; then
            echo "TEASER is empty, setting default"
            TEASER="–¢–∏–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏."
          fi
          TEASER=$(echo "$TEASER" | head -c 200)
          TEASER_ESCAPED=$(echo "$TEASER" | sed 's/[ _*[\]()~`>#+-=|{}\.!]/\\&/g')
          echo "TEASER_ESCAPED=$TEASER_ESCAPED" >> $GITHUB_ENV
          MESSAGE="üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç: \"$TITLE_ESCAPED\"\n\n–ö—Ä–∞—Ç–∫–∏–π —Ç–∏–∑–µ—Ä: $TEASER_ESCAPED\n\n[–ß–∏—Ç–∞—Ç—å](https://lybra-ai.ru/$DATE/$SLUG?utm_source=telegram&utm_medium=channel&utm_campaign=post)\n\n#–ò–ò #–¢—Ä–µ–Ω–¥—ã2025 #LybraAI"
          MESSAGE_LENGTH=$(echo -n "$MESSAGE" | wc -c)
          echo "Message length: $MESSAGE_LENGTH"
          if [ "$MESSAGE_LENGTH" -gt 4096 ]; then
            echo "::error::Message length ($MESSAGE_LENGTH) exceeds Telegram limit of 4096 characters"
            exit 1
          fi
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
      - name: Log extracted data
        run: |
          echo "TITLE: $TITLE"
          echo "TITLE_ESCAPED: $TITLE_ESCAPED"
          echo "DATE: $DATE"
          echo "SLUG: $SLUG"
          echo "POST_NUM: $POST_NUM"
          echo "TEASER: $TEASER"
          echo "TEASER_ESCAPED: $TEASER_ESCAPED"
          echo "IMAGE_FOUND: $IMAGE_FOUND"
          echo "IMAGE_URL_ACCESSIBLE: $IMAGE_URL_ACCESSIBLE"
          echo "PHOTO_URL: $PHOTO_URL"
          echo "MESSAGE: $MESSAGE"
      - name: Send to Telegram
        uses: appleboy/telegram-action@v1.0.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: ${{ env.MESSAGE }}
          photo: ${{ env.PHOTO_URL }}
      - name: Log Telegram step
        run: |
          echo "TELEGRAM_CHAT_ID: ***"  # –°–∫—Ä—ã—Ç–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          echo "Post title: $TITLE_ESCAPED"
          echo "Teaser escaped: $TEASER_ESCAPED"
          echo "URL: https://lybra-ai.ru/$DATE/$SLUG?utm_source=telegram&utm_medium=channel&utm_campaign=post"
