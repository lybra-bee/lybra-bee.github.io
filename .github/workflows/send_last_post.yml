name: Отправка последнего поста в Telegram

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'  # Ежедневно в 8:00 UTC (11:00 МСК)

env:
  ACTIONS_STEP_DEBUG: true  # Включаем отладку для всех шагов

jobs:
  send_post:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml transliterate
      - name: Check post files
        run: |
          ls -l _posts/ || echo "No posts directory found"
          if [ -z "$(ls -A _posts/)" ]; then
            echo "::error::No Markdown files found in _posts/"
            exit 1
          fi
      - name: Check extract_post_data.py
        run: |
          ls -l extract_post_data.py || echo "::error::extract_post_data.py not found"
          if [ ! -f extract_post_data.py ]; then
            exit 1
          fi
      - name: Check escape_markdown.py
        run: |
          ls -l escape_markdown.py || echo "::error::escape_markdown.py not found"
          if [ ! -f escape_markdown.py ]; then
            exit 1
          fi
      - name: Extract last post data
        run: |
          python extract_post_data.py
      - name: Validate extracted data
        run: |
          if [ -z "$TITLE" ]; then
            echo "::error::TITLE is empty"
            exit 1
          fi
          if [ -z "$DATE" ]; then
            echo "::error::DATE is empty"
            exit 1
          fi
          if [ -z "$SLUG" ]; then
            echo "::error::SLUG is empty"
            exit 1
          fi
          if [ -z "$IMAGE_URL" ]; then
            echo "::error::IMAGE_URL is empty, check front-matter 'image' in post"
            exit 1
          fi
      - name: Check image file
        run: |
          IMAGE_PATH="assets/images/posts/$(basename $IMAGE_URL)"
          echo "Checking image path in repository: $IMAGE_PATH"
          ls -l $IMAGE_PATH || echo "Image file $IMAGE_PATH not found in repository"
          if [ -f "$IMAGE_PATH" ]; then
            echo "IMAGE_FOUND=true" >> $GITHUB_ENV
          else
            echo "IMAGE_FOUND=false" >> $GITHUB_ENV
            echo "::warning::Image file $IMAGE_PATH not found in repository"
          fi
      - name: Check image URL
        run: |
          echo "Checking image URL: $IMAGE_URL"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$IMAGE_URL" --connect-timeout 5)
          echo "Image URL $IMAGE_URL status: HTTP $HTTP_STATUS"
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "IMAGE_URL_ACCESSIBLE=true" >> $GITHUB_ENV
            echo "PHOTO_URL=$IMAGE_URL" >> $GITHUB_ENV
          else
            echo "IMAGE_URL_ACCESSIBLE=false" >> $GITHUB_ENV
            echo "::warning::Image URL $IMAGE_URL not accessible (HTTP $HTTP_STATUS)"
            DEFAULT_IMAGE_URL="https://lybra-bee.github.io/assets/images/default.png"
            echo "Checking default image URL: $DEFAULT_IMAGE_URL"
            DEFAULT_HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEFAULT_IMAGE_URL" --connect-timeout 5)
            echo "Default image status: HTTP $DEFAULT_HTTP_STATUS"
            if [ "$DEFAULT_HTTP_STATUS" = "200" ]; then
              echo "PHOTO_URL=$DEFAULT_IMAGE_URL" >> $GITHUB_ENV
            else
              echo "PHOTO_URL=" >> $GITHUB_ENV
              echo "::warning::Default image $DEFAULT_IMAGE_URL not accessible (HTTP $DEFAULT_HTTP_STATUS), skipping photo"
            fi
          fi
      - name: Prepare Telegram message
        run: |
          python escape_markdown.py
          MESSAGE_LENGTH=$(echo -n "$MESSAGE" | wc -c)
          echo "Message length: $MESSAGE_LENGTH"
          if [ "$MESSAGE_LENGTH" -gt 4096 ]; then
            echo "::error::Message length ($MESSAGE_LENGTH) exceeds Telegram limit of 4096 characters"
            exit 1
          fi
      - name: Log extracted data
        run: |
          echo "TITLE: $TITLE"
          echo "TITLE_ESCAPED: $TITLE_ESCAPED"
          echo "DATE: $DATE"
          echo "SLUG: $SLUG"
          echo "IMAGE_URL: $IMAGE_URL"
          echo "TEASER: $TEASER"
          echo "TEASER_ESCAPED: $TEASER_ESCAPED"
          echo "IMAGE_FOUND: $IMAGE_FOUND"
          echo "IMAGE_URL_ACCESSIBLE: $IMAGE_URL_ACCESSIBLE"
          echo "PHOTO_URL: $PHOTO_URL"
          echo "MESSAGE: $MESSAGE"
      - name: Send to Telegram
        uses: appleboy/telegram-action@v1.0.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdownv2
          message: ${{ env.MESSAGE }}
          photo: ${{ env.PHOTO_URL }}
        env:
          DEBUG: true
      - name: Log Telegram step
        run: |
          echo "TELEGRAM_CHAT_ID: ***"
          echo "Post title: $TITLE_ESCAPED"
          echo "Teaser escaped: $TEASER_ESCAPED"
          echo "URL: https://lybra-ai.ru"
          echo "Photo URL sent: $PHOTO_URL"
