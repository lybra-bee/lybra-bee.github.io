#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
escape_markdown.py

–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–ª—è Telegram MarkdownV2 —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ TITLE –∏ TEASER,
—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã DATE –∏ SLUG) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
TITLE_ESCAPED, TEASER_ESCAPED –∏ MESSAGE –≤ GITHUB_ENV –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ GitHub Actions.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–≤ Actions –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ TITLE/TEASER –∑–∞–¥–∞–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏):
  python escape_markdown.py
–∏–ª–∏
  python escape_markdown.py "–ó–∞–≥–æ–ª–æ–≤–æ–∫" "–ö—Ä–∞—Ç–∫–∏–π —Ç–∏–∑–µ—Ä"
"""

import os
import re
import sys
from datetime import datetime

# --- –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram MarkdownV2 ---
def escape_markdown_v2(text: str) -> str:
    if text is None:
        return ""
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    # Telegram: _ * [ ] ( ) ~ ` > # + - = | { } . !
    special = r'[_*\[\]\(\)~`>#+\-=|{}\.!]'
    return re.sub(special, lambda m: '\\' + m.group(0), str(text))

# --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL —Å—Ç–∞—Ç—å–∏ –∏–∑ DATE –∏ SLUG (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã) ---
def build_post_url(date_raw: str, slug: str) -> str:
    site = "https://lybra-ai.ru"
    if not slug:
        return site
    if not date_raw:
        # –Ω–µ—Ç –¥–∞—Ç—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º —Å–∞–π—Ç/slug
        return f"{site.rstrip('/')}/{slug.strip('/')}/"
    date = date_raw.strip()
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: YYYY-MM-DD, YYYY/MM/DD, YYYYMMDD
    try:
        if "/" in date:
            # –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ YYYY/MM/DD
            parts = date.split("/")
            if len(parts[0]) == 4:
                yyyy = parts[0]
                mm = parts[1] if len(parts) > 1 else "01"
                dd = parts[2] if len(parts) > 2 else "01"
                return f"{site}/{yyyy}/{mm}/{dd}/{slug}.html"
        if "-" in date:
            # YYYY-MM-DD
            parts = date.split("-")
            yyyy, mm, dd = parts[0], parts[1] if len(parts) > 1 else "01", parts[2] if len(parts) > 2 else "01"
            return f"{site}/{yyyy}/{mm}/{dd}/{slug}.html"
        if len(date) == 8 and date.isdigit():
            # YYYYMMDD
            yyyy = date[0:4]; mm = date[4:6]; dd = date[6:8]
            return f"{site}/{yyyy}/{mm}/{dd}/{slug}.html"
    except Exception:
        pass
    # fallback
    return f"{site.rstrip('/')}/{slug.strip('/')}/"

def write_to_github_env(key: str, value: str):
    github_env = os.environ.get("GITHUB_ENV")
    if not github_env:
        # –ï—Å–ª–∏ GITHUB_ENV –Ω–µ –∑–∞–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ), –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        print(f"::warning::GITHUB_ENV not set, cannot write {key} to GitHub Actions environment")
        return
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º
    with open(github_env, "a", encoding="utf-8") as f:
        f.write(f"{key}={value}\n")

def write_multiline_to_github_env(key: str, value: str):
    github_env = os.environ.get("GITHUB_ENV")
    if not github_env:
        print(f"::warning::GITHUB_ENV not set, cannot write multiline {key} to GitHub Actions environment")
        return
    with open(github_env, "a", encoding="utf-8") as f:
        f.write(f"{key}<<EOF\n")
        f.write(value + "\n")
        f.write("EOF\n")

def main():
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (workflow extract_post_data.py –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö)
    title = os.environ.get("TITLE", "").strip()
    teaser = os.environ.get("TEASER", "").strip()
    date_env = os.environ.get("DATE", "").strip()  # –º–æ–∂–µ—Ç –±—ã—Ç—å '2025-08-03' –∏–ª–∏ '2025/08/03'
    slug = os.environ.get("SLUG", "").strip()

    # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not title and len(sys.argv) > 1:
        title = sys.argv[1].strip()
    if not teaser and len(sys.argv) > 2:
        teaser = sys.argv[2].strip()

    # –ï—Å–ª–∏ —Ç–∏–∑–µ—Ä –≤—Å—ë –µ—â—ë –ø—É—Å—Ç ‚Äî –∑–∞–ø–∞—Å–Ω–æ–π —Ç–µ–∫—Å—Ç
    if not teaser:
        teaser = "–ß–∏—Ç–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é –æ —Ç—Ä–µ–Ω–¥–∞—Ö –ò–ò 2025 –≥–æ–¥–∞ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ!"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–∏–∑–µ—Ä –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    teaser = teaser.strip()[:200]

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ—Å—Ç–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    post_url = build_post_url(date_env, slug)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è MarkdownV2
    title_escaped = escape_markdown_v2(title)
    teaser_escaped = escape_markdown_v2(teaser)
    url_escaped = escape_markdown_v2(post_url)

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkdownV2
    # –ü—Ä–∏–º–µ—Ä:
    # üì¢ *–ù–æ–≤—ã–π –ø–æ—Å—Ç*: "–ó–∞–≥–æ–ª–æ–≤–æ–∫"
    # üîó [–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é](https://...)
    # #–ò–ò #–¢—Ä–µ–Ω–¥—ã2025
    hashtags = "#–ò–ò #–¢—Ä–µ–Ω–¥—ã2025 #LybraAI"
    hashtags_escaped = escape_markdown_v2(hashtags)

    message_lines = [
        f"üì¢ *–ù–æ–≤—ã–π –ø–æ—Å—Ç*: \"{title_escaped}\"",
        "",
        f"*–ö—Ä–∞—Ç–∫–∏–π —Ç–∏–∑–µ—Ä*: {teaser_escaped}",
        "",
        f"[–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({post_url})",
        "",
        hashtags_escaped
    ]
    message = "\n".join(message_lines)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (Telegram –ª–∏–º–∏—Ç 4096)
    if len(message) > 4096:
        print(f"::warning::Message length {len(message)} > 4096. Truncating teaser.")
        # –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π —Ç–∏–∑–µ—Ä
        allowed = 4096 - (len("\n\nüì¢ *–ù–æ–≤—ã–π –ø–æ—Å—Ç*: \"\"") + len(title_escaped) + 50)
        teaser_trunc = teaser_escaped[:max(0, allowed)]
        message_lines = [
            f"üì¢ *–ù–æ–≤—ã–π –ø–æ—Å—Ç*: \"{title_escaped}\"",
            "",
            f"*–ö—Ä–∞—Ç–∫–∏–π —Ç–∏–∑–µ—Ä*: {teaser_trunc}‚Ä¶",
            "",
            f"[–ß–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é]({post_url})",
            "",
            hashtags_escaped
        ]
        message = "\n".join(message_lines)

    # –ü–∏—à–µ–º –≤ GITHUB_ENV
    # TITLE_ESCAPED –∏ TEASER_ESCAPED –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤
    write_to_github_env("TITLE_ESCAPED", title_escaped)
    write_to_github_env("TEASER_ESCAPED", teaser_escaped)
    # MESSAGE ‚Äî –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    write_multiline_to_github_env("MESSAGE", message)

    # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ‚Äî –ø–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥
    print("Prepared message:")
    print("-----")
    print(message)
    print("-----")
    print(f"Post URL: {post_url}")
    print(f"TITLE_ESCAPED: {title_escaped}")
    print(f"TEASER_ESCAPED: {teaser_escaped}")

if __name__ == "__main__":
    main()
