#!/usr/bin/env python3
import os
import sys
import json
import requests
import time
import logging
import glob
import shutil
from datetime import datetime
from slugify import slugify
import yaml

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
GALLERY_SRC_DIR = 'static/images/posts'
GALLERY_DEST_DIR = 'assets/gallery'
POSTS_DIR = 'content/posts'
GALLERY_FILE = 'data/gallery.yaml'
PLACEHOLDER = 'static/images/placeholder.svg'

os.makedirs(POSTS_DIR, exist_ok=True)
os.makedirs(GALLERY_SRC_DIR, exist_ok=True)
os.makedirs(GALLERY_DEST_DIR, exist_ok=True)
os.makedirs(os.path.dirname(PLACEHOLDER), exist_ok=True)
os.makedirs(os.path.dirname(GALLERY_FILE), exist_ok=True)

def safe_yaml_value(value):
    if not value:
        return ""
    return str(value).replace('"', "'").replace(':', ' -').replace('\n', ' ').replace('\r', ' ').strip()

def generate_with_groq(prompt, max_tokens=1000):
    if not GROQ_API_KEY:
        logging.warning("‚ö†Ô∏è Groq API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    try:
        logging.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º Groq...")
        headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}
        r = requests.post("https://api.groq.com/openai/v1/chat/completions", headers=headers, json={
            "model": "llama-3.3-70b-versatile",
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": max_tokens
        }, timeout=60)
        r.raise_for_status()
        content = r.json()["choices"][0]["message"]["content"].strip()
        logging.info("‚úÖ Groq –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        return content
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Groq –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        return None

def generate_with_openrouter(prompt, max_tokens=1000):
    if not OPENROUTER_API_KEY:
        logging.warning("‚ö†Ô∏è OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    try:
        logging.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter...")
        headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}
        r = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json={
            "model": "gpt-4o-mini",
            "messages": [{"role": "user", "content": prompt}],
            "max_tokens": max_tokens
        }, timeout=60)
        r.raise_for_status()
        content = r.json()["choices"][0]["message"]["content"].strip()
        logging.info("‚úÖ OpenRouter –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        return content
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        return None

def generate_article():
    header_prompt = "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö (–Ω–µ –±–æ–ª–µ–µ 7 —Å–ª–æ–≤)"
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞...")
    title = generate_with_groq(header_prompt, max_tokens=50)
    model = "Groq"
    if not title:
        logging.info("üîÑ –ü—Ä–æ–±—É–µ–º OpenRouter –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞...")
        title = generate_with_openrouter(header_prompt, max_tokens=50)
        model = "OpenRouter"
    if not title:
        title = "–ù–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –ò–ò 2025"
        model = "Fallback"
        logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî fallback")
    logging.info(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")

    content_prompt = f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ 500-600 —Å–ª–æ–≤ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: {title}. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º."
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏...")
    text = generate_with_groq(content_prompt, max_tokens=1500)
    if not text:
        logging.info("üîÑ –ü—Ä–æ–±—É–µ–º OpenRouter –¥–ª—è —Ç–µ–∫—Å—Ç–∞...")
        text = generate_with_openrouter(content_prompt, max_tokens=1500)
    if not text:
        text = """–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ä–∞—Å–ª–∏. –í 2025 –≥–æ–¥—É –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã:

1. **–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π AI** - –º–æ–¥–µ–ª–∏ GPT –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º.
2. **–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å** - AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∞—É–¥–∏–æ.
3. **–≠—Ç–∏—á–µ—Å–∫–∏–π AI** - —Ñ–æ–∫—É—Å –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç—Ç–∏–∫–µ."""
        logging.warning("‚ö†Ô∏è –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî fallback")
    return title, text, model

def generate_image(title, slug):
    logging.info("üñºÔ∏è –ü—Ä–æ–±—É–µ–º DeepAI –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    prompt = f"{title}, futuristic AI theme, sci-fi style, high-tech"
    try:
        r = requests.post("https://api.deepai.org/api/text2img", data={"text": prompt}, timeout=30)
        r.raise_for_status()
        img_url = r.json()["output_url"]
        img_data = requests.get(img_url, timeout=30).content
        img_path = os.path.join(GALLERY_SRC_DIR, f"{slug}.png")
        with open(img_path, 'wb') as f:
            f.write(img_data)
        logging.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {img_path}")
        return f"/images/posts/{slug}.png"
    except Exception as e:
        logging.error(f"‚ùå DeepAI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        return generate_placeholder(title, slug)

def generate_placeholder(title, slug):
    logging.info("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ SVG-placeholder...")
    img_path = os.path.join(GALLERY_SRC_DIR, f"{slug}.svg")
    safe_title = title.replace('"', '').replace("'", "")
    svg_content = f'''<svg width="1200" height="630" xmlns="http://www.w3.org/2000/svg">
<defs><linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
<stop offset="0%" stop-color="#667eea"/>
<stop offset="100%" stop-color="#764ba2"/>
</linearGradient></defs>
<rect width="100%" height="100%" fill="url(#grad)"/>
<text x="600" y="300" font-family="Arial" font-size="48" fill="white" text-anchor="middle" font-weight="bold">{safe_title}</text>
<text x="600" y="380" font-family="Arial" font-size="24" fill="rgba(255,255,255,0.8)" text-anchor="middle">AI Generated Content</text>
</svg>'''
    with open(img_path, 'w', encoding='utf-8') as f:
        f.write(svg_content)
    logging.info(f"‚úÖ Placeholder —Å–æ–∑–¥–∞–Ω: {img_path}")
    return f"/images/posts/{slug}.svg"

def save_article(title, text, model, slug, image_path):
    try:
        filename = os.path.join(POSTS_DIR, f"{slug}.md")
        image_url = image_path if image_path.startswith('/') else f"/{image_path}"
        front_matter = {
            'title': safe_yaml_value(title),
            'date': datetime.now().strftime("%Y-%m-%dT%H:%M:%S+03:00"),
            'image': image_url,
            'draft': False,
            'tags': ["AI", "Tech", "–ù–µ–π—Ä–æ—Å–µ—Ç–∏"],
            'categories': ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
            'author': model,
            'type': "posts",
            'description': safe_yaml_value(text[:150] + "..." if len(text) > 150 else text)
        }
        yaml_content = yaml.safe_dump(front_matter, allow_unicode=True, default_flow_style=False, sort_keys=False)
        content = f"---\n{yaml_content}---\n\n{text}"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏: {e}")

def update_gallery(slug, title, image_path):
    try:
        ext = os.path.splitext(image_path)[1]
        dest_path = os.path.join(GALLERY_DEST_DIR, f"{slug}{ext}")
        shutil.copy(os.path.join(GALLERY_SRC_DIR, f"{slug}{ext}"), dest_path)
        gallery = []
        if os.path.exists(GALLERY_FILE):
            with open(GALLERY_FILE, 'r', encoding='utf-8') as f:
                gallery = yaml.safe_load(f) or []
        gallery.insert(0, {
            'title': safe_yaml_value(title),
            'alt': safe_yaml_value(title),
            'src': f"/assets/gallery/{slug}{ext}",
            'date': datetime.now().strftime("%Y-%m-%d"),
            'tags': ["AI", "Tech"]
        })
        with open(GALLERY_FILE, 'w', encoding='utf-8') as f:
            yaml.safe_dump(gallery, f, allow_unicode=True, default_flow_style=False)
        logging.info(f"‚úÖ –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(gallery)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏: {e}")

def cleanup_old_posts(keep=10):
    posts = sorted(glob.glob(os.path.join(POSTS_DIR, "*.md")), key=os.path.getmtime, reverse=True)
    for old_post in posts[keep:]:
        os.remove(old_post)
        logging.info(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç–∞—Ç—å—è: {old_post}")

def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    title, text, model = generate_article()
    slug = slugify(title)
    image_path = generate_image(title, slug)
    save_article(title, text, model, slug, image_path)
    update_gallery(slug, title, image_path)
    cleanup_old_posts(keep=10)
    logging.info("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
